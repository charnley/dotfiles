
# TODO flow
# add "thin mode"
# Always start tmux, but if tmux does not have a name, delete the session when on exit
# don't show tmux bar when just opened

# Notes
# ? list shortcuts
# d detach from session
# $ rename session
# , rename window

# c           new window
# w           list windows
# f           find window
# &           kill window
# .           move window - prompted for a new number
# :movew<CR>  move window to the next unused number

# o  swap panes
# x  kill pane
# ⍽  space - toggle between layouts

# z           zoom to pane

# Synchrinoze panes
# :setw synchronize-panes

# copy and paste from terminal
# Copy the text: select the text and press mouse left-button with shift key press too.
# Paste the text with shift key + middle-button

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Set default shell
set-option -g default-shell $SHELL

# utf8 support
#set-window-option -g utf8 on

# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session,
# even if both clients are looking at different windows.
# It seems that in this particular case, Screen has the better default
# where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on

# automatically renumber tmux windows
set -g renumber-windows on

# don't rename windows automatically
set-option -g allow-rename off

# No delay for escape key press
set -sg escape-time 0

# split panes using | and -
bind-key s split-window -h -c "#{pane_current_path}"
bind-key v split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ~/.tmux.conf \; display "Config Reloaded!"

# usage: resize-pane [-DLRUZ] [-x width] [-y height] [-t target-pane] [adjustment]
# TODO add auto adjust when selecting pane
# ei. resize-pane -D 10 -U 10
# e.g.

# Use Alt-vim keys without prefix key to switch panes
bind -n S-Up    select-pane -U
bind -n S-Down  select-pane -D
bind -n S-Left  select-pane -L
bind -n S-Right select-pane -R

# resize
bind -r S-Up resize-pane -U 5
bind -r S-Down resize-pane -D 5
bind -r S-Left resize-pane -L 5
bind -r S-Right resize-pane -R 5

# Move to window
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Window/pane surgery
# TODO
# :joinp -s :2<CR>  move window 2 into a new pane in the current window
# :joinp -t :1<CR>  move the current pane into a new pane in window 1

# Moving tmux pane to window
# TODO
# http://unix.stackexchange.com/questions/14300/moving-tmux-pane-to-window

# Reorder windows
# http://superuser.com/questions/343572/how-do-i-reorder-tmux-windows
# WTF who designed tmux keyboard shortcuts?
# The swap-pane command can do this for you. The { and } keys are bound to swap-pane -U and swap-pane -D in the default configuration.
# https://superuser.com/questions/879190/how-does-one-swap-two-panes-in-tmux
bind-key -r C-Left swap-window -t -1
bind-key -r C-Right swap-window -t +1

# bind fast session switching
unbind S
bind S command-prompt "switch -t %1"

# Synchronize panes
# e.i. write the same command in all windows
bind = set -g synchronize-panes

# for some reason this needs to be set again?!
bind d detach

# bind-key -n C-Tab next-window
# bind-key -n C-S-Tab previous-window

# Copy vbuf to terminal clipboard
# bind x command-prompt "cat ~/.vbuf | yank"

# write in all panes at once
bind x set-window-option synchronize-panes

# kill current window
bind-key q confirm kill-window

# kill current pane
bind-key -n C-q kill-pane

# Fix for mac osx
if-shell "uname | grep -q Darwin" "source-file ~/.tmux-osx" "source-file .tmux-linux"

set-window-option -g xterm-keys on  # to make ctrl-arrow, etc. work
set-option -g lock-command vlock

# Make mouse useful in copy mode
# Allow mouse to select which pane to use
set -g mouse on

# Scroll History
set -g history-limit 30000

# Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

# Start numbering at 1 (zero is so far away)
set -g base-index 1
set -g pane-base-index 1

# Turn on window titles
set -g set-titles on

# Set window title string
#  #H  Hostname of local host
#  #I  Current window index
#  #P  Current pane index
#  #S  Session name
#  #T  Current window title
#  #W  Current window name
#  #   A literal ‘#’
set -g set-titles-string '#H:#S'

# Automatically set window title
setw -g automatic-rename

######################
### DESIGN CHANGES ###
######################

# !!BLACK
# *color0:               #666666
# *color8:               #999999
# !!RED
# *color1:               #CC3366
# *color9:               #FF6699
# !!GREEN
# *color2:               #66CC33
# *color10:              #99FF66
# !!YELLOW
# *color3:               #CC9933
# *color11:              #FFCC66
# !!BLUE
# *color4:               #3366CC
# *color12:              #6699FF
# !!MAGENTA
# *color5:               #9933CC
# *color13:              #CC66FF
# !!CYAN
# *color6:               #33CC99
# *color14:              #66FFCC
# !!WHITE
# *color7:               #CCCCCC
# *color15:              #FFFFFF

set -g status-interval 2

# panes
set -g pane-border-style fg='#555555'
set -g pane-active-border-style fg='#0373bb'

# Status bar
set -g status-justify left
set -g status-style bg=default,fg="#0373bb"

# messaging
set -g message-style fg=white,bg="#0373bb"
set -g message-command-style fg=blue,bg=black

# window mode
setw -g mode-style bg=colour11,fg=colour0

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-current-style fg=colour81,bg='#0373bb'
setw -g window-status-current-format ' #I#[fg=colour250] #[fg=colour255]#W#[fg=colour50]#F '
setw -g window-status-style fg=colour138,bg=default
setw -g window-status-format ' #I#[fg=colour237] #[fg=colour250]#W#[fg=colour244]#F '
setw -g window-status-bell-style fg=colour255,bg=colour1

# Info on left
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

setw -g window-status-bell-style fg=colour255,bg=colour1

set -g status-bg '#111111'
set -g status-fg '#ffffff'

# another color for another host
set -g status-right '#S #(whoami) @ #H '

if '[ `hostname -s` == laptop ]' "set -g status-right '#[bg='#0373bb']#[fg='#ffffff'] #S #H ' "

if '[ `uname -s` == Darwin ]' \
    "set -g status-right '#[bg='#0373bb']#[fg='#ffffff'] #S #H ' "

# Plugins
# https://github.com/tmux-plugins/tpm
#
# Installing plugins
#
#     Add new plugin to ~/.tmux.conf with set -g @plugin '...'
#     Press prefix + I (capital I, as in Install) to fetch the plugin.
#
# You're good to go! The plugin was cloned to ~/.tmux/plugins/ dir and sourced.
# Uninstalling plugins
#
#     Remove (or comment out) plugin from the list.
#     Press prefix + alt + u (lowercase u as in uninstall) to remove the plugin.
#
# All the plugins are installed to ~/.tmux/plugins/ so alternatively you can find plugin directory there and remove it.
# Key bindings
#
# prefix + I
#
#     Installs new plugins from GitHub or any other git repository
#     Refreshes TMUX environment
#
# prefix + U
#
#     updates plugin(s)
#
# prefix + alt + u
#
#     remove/uninstall plugins not on the plugin list
#

# setup
set -g @plugin 'tmux-plugins/tpm'

# copy cat at some point for using tmux all the time
# https://github.com/tmux-plugins/tmux-copycat
#
# Search
#
# prefix + / - regex search (strings work too)
# Example search entries:
#
# foo - searches for string foo
# [0-9]+ - regex search for numbers
# Grep is used for searching.
# Searches are case insensitive.
#
# Predefined searches
#
# prefix + ctrl-f - simple file search
# prefix + ctrl-g - jumping over git status files (best used after git status command)
# prefix + alt-h - jumping over SHA-1 hashes (best used after git log command)
# prefix + ctrl-u - url search (http, ftp and git urls)
# prefix + ctrl-d - number search (mnemonic d, as digit)
# prefix + alt-i - ip address search
# These start "copycat mode" and jump to first match.
#
# "Copycat mode" bindings
#
# These are enabled when you search with copycat:
#
# n - jumps to the next match
# N - jumps to the previous match
# To copy a highlighted match:
#
# Enter - if you're using Tmux vi mode
# ctrl-w or alt-w - if you're using Tmux emacs mode
# Copying a highlighted match will take you "out" of copycat mode. Paste with prefix + ] (this is Tmux default paste).
set -g @plugin 'tmux-plugins/tmux-copycat'

# prefix + y - copies text from the command line to clipboard.
# Works with all popular shells/repls. Tested with:
#
# shells: bash, zsh (with bindkey -e), tcsh
# repls: irb, pry, node, psql, python, php -a, coffee
# remote shells: ssh, mosh
# vim/neovim command line (requires vim-husk or vim-rsi plugin)
# prefix + Y (shift-y) - copy pane current working directory to clipboard.
#
# copy mode bindings:
#
# y - copy selection to system clipboard
# Y (shift-y) - "put" selection - equivalent to copying a selection, and pasting it to the command line
# Alt-y - performs both of the above: copy to system clipboard and put to command line (deprecated, not useful)
# set -g @plugin 'tmux-plugins/tmux-yank'

# https://sunaku.github.io/tmux-yank-osc52.html
# transfer copied text to attached terminal with yank
#bind-key -n M-v vi-copy y copy-pipe 'yank > #{pane_tty}'

# transfer copied text to attached terminal with yank
bind-key -n M-y run-shell 'tmux save-buffer - | yank > #{pane_tty}'

# transfer previously copied text (chosen from a menu) to attached terminal
bind-key -n M-Y choose-buffer 'run-shell "tmux save-buffer -b \"%%\" - | yank > #{pane_tty}"'

# a-z: yank a highlighted hint.
# <space>: toggle compact hints ( see @fingers-compact-hints  ).
# <Ctrl-C>: exit [fingers] mode
# <esc>: exit help or [fingers] mode
# ?: show help.
set -g @plugin 'Morantron/tmux-fingers'
set -g @fingers-compact-hints 1

# tmux ressurect, no reason not to have it
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-save-bash-history 'off' # experimental # note: didn't like dirty terminals
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-save 'C-s'
set -g @resurrect-restore 'C-r'
set -g @resurrect-dir '$HOME/.tmux/resurrect/$HOSTNAME'

set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-save-interval '60'
set -g @continuum-restore 'on'

set -g @plugin 'abhinav/tmux-fastcopy'

set -g @plugin 'laktak/extrakto'
# allow OSC52 to set the clipboard
set -g set-clipboard on
set -g @extrakto_clip_tool "yank"
set -g @extrakto_clip_tool_run "fg"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"

# Custom scripts
bind-key -r i run-shell "tmux neww tmux-cheat.sh"

# for image.nvim
set -gq allow-passthrough on

# for ssh variable passthrough
set-option -g update-environment "SSH_CLIENT SSH_TTY"
